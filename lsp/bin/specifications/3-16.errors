export const EOL: string[] = ['\n', '\r\n', '\r'];
line: 1 char: 12
1. exn: Lsp_gen__Ts_parser.MenhirBasics.Error

---
{
    start: { line: 5, character: 23 },
    end : { line: 6, character: 0 }
}
line: 1 char: 1
2. exn: Lsp_gen__Ts_parser.MenhirBasics.Error

---
{ language: 'typescript', scheme: 'file' }
{ language: 'json', pattern: '**/package.json' }
line: 1 char: 1
3. exn: Lsp_gen__Ts_parser.MenhirBasics.Error

---
	/**
	 * Window specific client capabilities.
	 */
	window?: {
		/**
		 * Whether client supports server initiated progress using the
		 * `window/workDoneProgress/create` request.
		 */
		workDoneProgress?: boolean;
	};
line: 4 char: 7
4. exn: Lsp_gen__Ts_parser.MenhirBasics.Error

---
textDocument.codeAction.resolveSupport = { properties: ['edit'] };
line: 1 char: 12
5. exn: Lsp_gen__Ts_parser.MenhirBasics.Error

---
{
    "title": "Do Foo"
}
line: 1 char: 1
6. exn: Lsp_gen__Ts_parser.MenhirBasics.Error

---
export enum SemanticTokenTypes {
	namespace = 'namespace',
	/**
	 * Represents a generic type. Acts as a fallback for types which
	 * can't be mapped to a specific type like class or enum.
	 */
	type = 'type',
	class = 'class',
	enum = 'enum',
	interface = 'interface',
	struct = 'struct',
	typeParameter = 'typeParameter',
	parameter = 'parameter',
	variable = 'variable',
	property = 'property',
	enumMember = 'enumMember',
	event = 'event',
	function = 'function',
	method = 'method',
	macro = 'macro',
	keyword = 'keyword',
	modifier = 'modifier',
	comment = 'comment',
	string = 'string',
	number = 'number',
	regexp = 'regexp',
	operator = 'operator'
}

export enum SemanticTokenModifiers {
	declaration = 'declaration',
	definition = 'definition',
	readonly = 'readonly',
	static = 'static',
	deprecated = 'deprecated',
	abstract = 'abstract',
	async = 'async',
	modification = 'modification',
	documentation = 'documentation',
	defaultLibrary = 'defaultLibrary'
}
line: 7 char: 5
7. exn: Lsp_gen__Ts_parser.MenhirBasics.Error

---
{ line: 2, startChar:  5, length: 3, tokenType: "property",
	tokenModifiers: ["private", "static"]
},
{ line: 2, startChar: 10, length: 4, tokenType: "type", tokenModifiers: [] },
{ line: 5, startChar:  2, length: 7, tokenType: "class", tokenModifiers: [] }
line: 1 char: 1
8. exn: Lsp_gen__Ts_parser.MenhirBasics.Error

---
{
   tokenTypes: ['property', 'type', 'class'],
   tokenModifiers: ['private', 'static']
}
line: 1 char: 1
9. exn: Lsp_gen__Ts_parser.MenhirBasics.Error

---
{ line: 2, startChar:  5, length: 3, tokenType: 0, tokenModifiers: 3 },
{ line: 2, startChar: 10, length: 4, tokenType: 1, tokenModifiers: 0 },
{ line: 5, startChar:  2, length: 7, tokenType: 2, tokenModifiers: 0 }
line: 1 char: 1
10. exn: Lsp_gen__Ts_parser.MenhirBasics.Error

---
{ deltaLine: 2, deltaStartChar: 5, length: 3, tokenType: 0, tokenModifiers: 3 },
{ deltaLine: 0, deltaStartChar: 5, length: 4, tokenType: 1, tokenModifiers: 0 },
{ deltaLine: 3, deltaStartChar: 2, length: 7, tokenType: 2, tokenModifiers: 0 }
line: 1 char: 1
11. exn: Lsp_gen__Ts_parser.MenhirBasics.Error

---
// 1st token,  2nd token,  3rd token
[  2,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ]
line: 2 char: 1
12. exn: Lsp_gen__Ts_parser.MenhirBasics.Error

---
{ line: 3, startChar:  5, length: 3, tokenType: "property",
	tokenModifiers: ["private", "static"]
},
{ line: 3, startChar: 10, length: 4, tokenType: "type", tokenModifiers: [] },
{ line: 6, startChar:  2, length: 7, tokenType: "class", tokenModifiers: [] }
line: 1 char: 1
13. exn: Lsp_gen__Ts_parser.MenhirBasics.Error

---
// 1st token,  2nd token,  3rd token
[  3,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0]
line: 2 char: 1
14. exn: Lsp_gen__Ts_parser.MenhirBasics.Error

---
